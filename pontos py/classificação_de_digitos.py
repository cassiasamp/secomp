# -*- coding: utf-8 -*-
"""Classificação de digitos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ihs4aGuph1aRFr_ypXOb1ZhdUrG4sOIc

## Importando o dataset de digitos
"""

from sklearn import datasets

digitos = datasets.load_digits()
digitos

"""## Visualizando os digitos"""

import matplotlib.pyplot as plt 

plt.gray() 
plt.matshow(digitos.images[3]) 
plt.show()

digitos.data.max()

"""## Normalizando os digitos"""

digitos.data

dados_digitos = digitos.data / digitos.data.max()

dados_digitos

"""## Separando 90% para treinar"""

len(dados_digitos)

.9*1797

numero_amostras = len(dados_digitos)
numero_amostras

X_treino = dados_digitos[:int(.9 * numero_amostras)]
len(X_treino)

digitos_alvo = digitos.target

digitos_alvo

len(digitos_alvo)

y_treino = digitos_alvo[:int(.9 * numero_amostras)]

len(y_treino)

"""## Separando 10% para testar"""

X_teste = dados_digitos[int(.9 * n_samples):]
len(X_teste)

X_teste

y_teste = digitos_alvo[int(.9 * n_samples):]
len(y_teste)

1617+180

"""## Usando regressão logística"""

from sklearn import linear_model

regressao = linear_model.LogisticRegression()

regressao.fit(X_treino, y_treino)

regressao = linear_model.LogisticRegression(solver='lbfgs', max_iter=1000, multi_class='multinomial')

regressao

regressao.fit(X_treino, y_treino)

predicao_regressao = regressao.predict(X_teste)

predicao_regressao[1]

y_teste[1]

predicao_regressao[11]

y_teste[11]

regressao.score(X_teste, y_teste)

print('Resultado regressão logística: %f' % regressao.fit(X_treino, y_treino).score(X_teste, y_teste))

resultado_regressao = regressao.fit(X_treino, y_treino).score(X_teste, y_teste)

print('LogisticRegression score: %f' % resultado_regressao)

"""## Usando KNN"""
"""#"""
from sklearn import neighbors

knn = neighbors.KNeighborsClassifier()

knn

knn.fit(X_treino, y_treino)

predicoes_knn = knn.predict(X_teste)
predicoes_knn[1]

numero_predito = y_teste[1]
numero_predito

knn.score(X_teste, y_teste)

resultado_knn = knn.fit(X_treino, y_treino).score(X_teste, y_teste)
resultado_knn

print('Resultado KNN: %f' % resultado_knn)
